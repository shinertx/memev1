# MemeSnipe v17-Pro Python Services Only
services:
  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  dashboard:
    build: { context: ., dockerfile: dashboard/Dockerfile }
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_APP=app.py
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - shared-data:/app/data

  strategy_factory:
    build: { context: ., dockerfile: strategy_factory/Dockerfile }
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    volumes:
      - shared-data:/app/shared

  funding_consumer:
    build: { context: ., dockerfile: data_consumers/Dockerfile }
    command: python funding_consumer.py
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    depends_on:
      - redis

  bridge_consumer:
    build: { context: ., dockerfile: data_consumers/Dockerfile }
    command: python bridge_consumer.py
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    depends_on:
      - redis

  depth_consumer:
    build: { context: ., dockerfile: data_consumers/Dockerfile }
    command: python depth_consumer.py
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    depends_on:
      - redis

  helius_rpc_price_consumer:
    build: { context: ., dockerfile: data_consumers/Dockerfile }
    command: python helius_rpc_price_consumer.py
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
    depends_on:
      - redis

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - dashboard

volumes:
  shared-data:
    driver: local
