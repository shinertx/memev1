# MemeSnipe v17-Pro (Patched) - CORRECTED & SECURE Docker Compose
# This file uses a consistent build context for each service.
services:
  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  signer:
    build: { context: ., dockerfile: signer/Dockerfile }
    restart: unless-stopped
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      # WALLET_KEYPAIR_PATH is set by Docker Secrets mechanism
    secrets:
      - wallet_json # CRITICAL: Mounts wallet via Docker secrets for security



  strategy_factory:
    build: { context: ./strategy_factory }
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env

  meta_allocator:
    build: { context: ./meta_allocator }
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}

  executor:
    build: 
      context: . # Build from workspace root to access shared-models
      dockerfile: executor/Dockerfile
    restart: unless-stopped
    depends_on: [redis, signer, meta_allocator]
    ports: ["9184:9184"]
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - JITO_AUTH_KEYPAIR_PATH=/run/secrets/jito_auth.json # <â€” match file name for Jito key
      - LIBCLANG_PATH=/usr/lib/llvm-14/lib # drift-rs needs this for build environment
    volumes:
      - shared-data:/app/shared          # named volume for db + artefacts
    secrets:
      - jito_auth_json # Mount Jito auth key via Docker secrets


  # New data consumer services (simulated for out-of-box testing)
  bridge_consumer:
    build: { context: ./data_consumers }
    command: python bridge_consumer.py
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env

  depth_consumer:
    build: { context: ./data_consumers }
    command: python depth_consumer.py
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env

  funding_consumer:
    build: { context: ./data_consumers }
    command: python funding_consumer.py
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env

  helius_rpc_price_consumer: # P-2: New consumer for real-time SOL/USD price
    build: { context: ./data_consumers }
    command: python helius_rpc_price_consumer.py
    restart: unless-stopped
    depends_on: [redis]
    env_file: .env

  dashboard:
    build: { context: ., dockerfile: dashboard/Dockerfile }
    restart: unless-stopped
    depends_on: [redis, executor]
    ports: ["8080:5000"]
    env_file: .env
    volumes:
      - shared-data:/app/shared:ro

# Docker Secrets definition (to keep sensitive files out of image layers)
secrets:
  wallet_json:
    file: ./${WALLET_KEYPAIR_FILENAME}
  jito_auth_json:
    file: ./${JITO_AUTH_KEYPAIR_FILENAME}

# Named volume for persistent data (e.g., SQLite DB)
volumes:
  shared-data:
